{"dependencies":[{"name":"/Users/yiningshi/dev/tfjs-models/posenet/demos/package.json","includedInParent":true,"mtime":1530912130696},{"name":"/Users/yiningshi/dev/tfjs-models/posenet/demos/.babelrc","includedInParent":true,"mtime":1529855715672},{"name":"/Users/yiningshi/dev/tfjs-models/posenet/tsconfig.json","includedInParent":true,"mtime":1529855715734},{"name":"@tensorflow/tfjs","loc":{"line":3,"column":21}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar MANIFEST_FILE = 'manifest.json';\nvar CheckpointLoader = (function () {\n    function CheckpointLoader(urlPath) {\n        this.urlPath = urlPath;\n        if (this.urlPath.charAt(this.urlPath.length - 1) !== '/') {\n            this.urlPath += '/';\n        }\n    }\n    CheckpointLoader.prototype.loadManifest = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', _this.urlPath + MANIFEST_FILE);\n            xhr.onload = function () {\n                _this.checkpointManifest = JSON.parse(xhr.responseText);\n                resolve();\n            };\n            xhr.onerror = function (error) {\n                throw new Error(MANIFEST_FILE + \" not found at \" + _this.urlPath + \". \" + error);\n            };\n            xhr.send();\n        });\n    };\n    CheckpointLoader.prototype.getCheckpointManifest = function () {\n        var _this = this;\n        if (this.checkpointManifest == null) {\n            return new Promise(function (resolve, reject) {\n                _this.loadManifest().then(function () {\n                    resolve(_this.checkpointManifest);\n                });\n            });\n        }\n        return new Promise(function (resolve, reject) {\n            resolve(_this.checkpointManifest);\n        });\n    };\n    CheckpointLoader.prototype.getAllVariables = function () {\n        var _this = this;\n        if (this.variables != null) {\n            return new Promise(function (resolve, reject) {\n                resolve(_this.variables);\n            });\n        }\n        return new Promise(function (resolve, reject) {\n            _this.getCheckpointManifest().then(function (checkpointDefinition) {\n                var variableNames = Object.keys(_this.checkpointManifest);\n                var variablePromises = [];\n                for (var i = 0; i < variableNames.length; i++) {\n                    variablePromises.push(_this.getVariable(variableNames[i]));\n                }\n                Promise.all(variablePromises).then(function (variables) {\n                    _this.variables = {};\n                    for (var i = 0; i < variables.length; i++) {\n                        _this.variables[variableNames[i]] = variables[i];\n                    }\n                    resolve(_this.variables);\n                });\n            });\n        });\n    };\n    CheckpointLoader.prototype.getVariable = function (varName) {\n        var _this = this;\n        if (!(varName in this.checkpointManifest)) {\n            throw new Error('Cannot load non-existant variable ' + varName);\n        }\n        var variableRequestPromiseMethod = function (resolve, reject) {\n            var xhr = new XMLHttpRequest();\n            xhr.responseType = 'arraybuffer';\n            var fname = _this.checkpointManifest[varName].filename;\n            xhr.open('GET', _this.urlPath + fname);\n            xhr.onload = function () {\n                if (xhr.status === 404) {\n                    throw new Error(\"Not found variable \" + varName);\n                }\n                var values = new Float32Array(xhr.response);\n                var tensor = tfjs_1.Tensor.make(_this.checkpointManifest[varName].shape, { values: values });\n                resolve(tensor);\n            };\n            xhr.onerror = function (error) {\n                throw new Error(\"Could not fetch variable \" + varName + \": \" + error);\n            };\n            xhr.send();\n        };\n        if (this.checkpointManifest == null) {\n            return new Promise(function (resolve, reject) {\n                _this.loadManifest().then(function () {\n                    new Promise(variableRequestPromiseMethod).then(resolve);\n                });\n            });\n        }\n        return new Promise(variableRequestPromiseMethod);\n    };\n    return CheckpointLoader;\n}());\nexports.CheckpointLoader = CheckpointLoader;\n","map":{"version":3,"file":"checkpoint_loader.js","sourceRoot":"","sources":["../src/checkpoint_loader.ts"],"names":[],"mappings":";;AAiBA,yCAAwC;AAiBxC,IAAM,aAAa,GAAG,eAAe,CAAC;AAEtC;IAIE,0BAAoB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QACjC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;YACxD,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC;SACrB;IACH,CAAC;IAEO,uCAAY,GAApB;QAAA,iBAeC;QAdC,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,IAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,KAAI,CAAC,OAAO,GAAG,aAAa,CAAC,CAAC;YAE9C,GAAG,CAAC,MAAM,GAAG;gBACX,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBACvD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC;YACF,GAAG,CAAC,OAAO,GAAG,UAAC,KAAK;gBAClB,MAAM,IAAI,KAAK,CACR,aAAa,sBAAiB,KAAI,CAAC,OAAO,UAAK,KAAO,CAAC,CAAC;YACjE,CAAC,CAAC;YACF,GAAG,CAAC,IAAI,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gDAAqB,GAArB;QAAA,iBAWC;QAVC,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAAE;YACnC,OAAO,IAAI,OAAO,CAAqB,UAAC,OAAO,EAAE,MAAM;gBACrD,KAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC;oBACvB,OAAO,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,IAAI,OAAO,CAAqB,UAAC,OAAO,EAAE,MAAM;YACrD,OAAO,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,0CAAe,GAAf;QAAA,iBA0BC;QAzBC,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;YAC1B,OAAO,IAAI,OAAO,CAA8B,UAAC,OAAO,EAAE,MAAM;gBAC9D,OAAO,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,IAAI,OAAO,CAA8B,UAAC,OAAO,EAAE,MAAM;YAC9D,KAAI,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAC7B,UAAC,oBAAwC;gBACvC,IAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC;gBAE3D,IAAM,gBAAgB,GAA2B,EAAE,CAAC;gBACpD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC7C,gBAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3D;gBAED,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,SAAS;oBAC1C,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;oBACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACzC,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;qBACjD;oBACD,OAAO,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;gBAC1B,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sCAAW,GAAX,UAAY,OAAe;QAA3B,iBAmCC;QAlCC,IAAI,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,OAAO,CAAC,CAAC;SACjE;QAED,IAAM,4BAA4B,GAC9B,UAAC,OAAiC,EAAE,MAAkB;YACpD,IAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;YACjC,GAAG,CAAC,YAAY,GAAG,aAAa,CAAC;YACjC,IAAM,KAAK,GAAG,KAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC;YACxD,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;YAEtC,GAAG,CAAC,MAAM,GAAG;gBACX,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;oBACtB,MAAM,IAAI,KAAK,CAAC,wBAAsB,OAAS,CAAC,CAAC;iBAClD;gBACD,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC9C,IAAM,MAAM,GACR,aAAM,CAAC,IAAI,CAAC,KAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAC,MAAM,QAAA,EAAC,CAAC,CAAC;gBAClE,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,CAAC;YACF,GAAG,CAAC,OAAO,GAAG,UAAC,KAAK;gBAClB,MAAM,IAAI,KAAK,CAAC,8BAA4B,OAAO,UAAK,KAAO,CAAC,CAAC;YACnE,CAAC,CAAC;YACF,GAAG,CAAC,IAAI,EAAE,CAAC;QACb,CAAC,CAAC;QAEN,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAAE;YACnC,OAAO,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;gBACzC,KAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC;oBACvB,IAAI,OAAO,CAAS,4BAA4B,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAClE,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,IAAI,OAAO,CAAS,4BAA4B,CAAC,CAAC;IAC3D,CAAC;IACH,uBAAC;AAAD,CAAC,AAxGD,IAwGC;AAxGY,4CAAgB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs';\n\n/**\n * @hidden\n */\nexport interface CheckpointVariable {\n  filename: string;\n  shape: number[];\n}\n\n/**\n * @hidden\n */\nexport type CheckpointManifest = {\n  [varName: string]: CheckpointVariable\n};\n\nconst MANIFEST_FILE = 'manifest.json';\n\nexport class CheckpointLoader {\n  private checkpointManifest: CheckpointManifest;\n  private variables: {[varName: string]: Tensor};\n\n  constructor(private urlPath: string) {\n    if (this.urlPath.charAt(this.urlPath.length - 1) !== '/') {\n      this.urlPath += '/';\n    }\n  }\n\n  private loadManifest(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.urlPath + MANIFEST_FILE);\n\n      xhr.onload = () => {\n        this.checkpointManifest = JSON.parse(xhr.responseText);\n        resolve();\n      };\n      xhr.onerror = (error) => {\n        throw new Error(\n            `${MANIFEST_FILE} not found at ${this.urlPath}. ${error}`);\n      };\n      xhr.send();\n    });\n  }\n\n  getCheckpointManifest(): Promise<CheckpointManifest> {\n    if (this.checkpointManifest == null) {\n      return new Promise<CheckpointManifest>((resolve, reject) => {\n        this.loadManifest().then(() => {\n          resolve(this.checkpointManifest);\n        });\n      });\n    }\n    return new Promise<CheckpointManifest>((resolve, reject) => {\n      resolve(this.checkpointManifest);\n    });\n  }\n\n  getAllVariables(): Promise<{[varName: string]: Tensor}> {\n    if (this.variables != null) {\n      return new Promise<{[varName: string]: Tensor}>((resolve, reject) => {\n        resolve(this.variables);\n      });\n    }\n\n    return new Promise<{[varName: string]: Tensor}>((resolve, reject) => {\n      this.getCheckpointManifest().then(\n          (checkpointDefinition: CheckpointManifest) => {\n            const variableNames = Object.keys(this.checkpointManifest);\n\n            const variablePromises: Array<Promise<Tensor>> = [];\n            for (let i = 0; i < variableNames.length; i++) {\n              variablePromises.push(this.getVariable(variableNames[i]));\n            }\n\n            Promise.all(variablePromises).then(variables => {\n              this.variables = {};\n              for (let i = 0; i < variables.length; i++) {\n                this.variables[variableNames[i]] = variables[i];\n              }\n              resolve(this.variables);\n            });\n          });\n    });\n  }\n\n  getVariable(varName: string): Promise<Tensor> {\n    if (!(varName in this.checkpointManifest)) {\n      throw new Error('Cannot load non-existant variable ' + varName);\n    }\n\n    const variableRequestPromiseMethod =\n        (resolve: (tensor: Tensor) => void, reject: () => void) => {\n          const xhr = new XMLHttpRequest();\n          xhr.responseType = 'arraybuffer';\n          const fname = this.checkpointManifest[varName].filename;\n          xhr.open('GET', this.urlPath + fname);\n\n          xhr.onload = () => {\n            if (xhr.status === 404) {\n              throw new Error(`Not found variable ${varName}`);\n            }\n            const values = new Float32Array(xhr.response);\n            const tensor =\n                Tensor.make(this.checkpointManifest[varName].shape, {values});\n            resolve(tensor);\n          };\n          xhr.onerror = (error) => {\n            throw new Error(`Could not fetch variable ${varName}: ${error}`);\n          };\n          xhr.send();\n        };\n\n    if (this.checkpointManifest == null) {\n      return new Promise<Tensor>((resolve, reject) => {\n        this.loadManifest().then(() => {\n          new Promise<Tensor>(variableRequestPromiseMethod).then(resolve);\n        });\n      });\n    }\n    return new Promise<Tensor>(variableRequestPromiseMethod);\n  }\n}\n"]}},"hash":"cc998550ad0a89dd4d34044e1e2f6835","cacheData":{"env":{}}}