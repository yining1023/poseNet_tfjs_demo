{"dependencies":[{"name":"/Users/yiningshi/dev/tfjs-models/posenet/demos/.babelrc","includedInParent":true,"mtime":1529855715672},{"name":"/Users/yiningshi/dev/tfjs-models/posenet/demos/package.json","includedInParent":true,"mtime":1530912130696}],"generated":{"js":"// /**\n//  * @license\n//  * Copyright 2018 Google Inc. All Rights Reserved.\n//  * Licensed under the Apache License, Version 2.0 (the \"License\");\n//  * you may not use this file except in compliance with the License.\n//  * You may obtain a copy of the License at\n//  *\n//  * https://www.apache.org/licenses/LICENSE-2.0\n//  *\n//  * Unless required by applicable law or agreed to in writing, software\n//  * distributed under the License is distributed on an \"AS IS\" BASIS,\n//  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  * See the License for the specific language governing permissions and\n//  * limitations under the License.\n//  * =============================================================================\n//  */\n// import * as posenet from '@tensorflow-models/posenet';\n// import dat from 'dat.gui';\n// import Stats from 'stats.js';\n// import {drawKeypoints, drawSkeleton} from './demo_util';\n\n// const videoWidth = 600;\n// const videoHeight = 500;\n// const stats = new Stats();\n\n// function isAndroid() {\n//   return /Android/i.test(navigator.userAgent);\n// }\n\n// function isiOS() {\n//   return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n// }\n\n// function isMobile() {\n//   return isAndroid() || isiOS();\n// }\n\n// /**\n//  * Loads a the camera to be used in the demo\n//  *\n//  */\n// async function setupCamera() {\n//   if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n//     throw new Error(\n//         'Browser API navigator.mediaDevices.getUserMedia not available');\n//   }\n\n//   const video = document.getElementById('video');\n//   video.width = videoWidth;\n//   video.height = videoHeight;\n\n//   const mobile = isMobile();\n//   const stream = await navigator.mediaDevices.getUserMedia({\n//     'audio': false,\n//     'video': {\n//       facingMode: 'user',\n//       width: mobile ? undefined : videoWidth,\n//       height: mobile ? undefined : videoHeight,\n//     },\n//   });\n//   video.srcObject = stream;\n\n//   return new Promise((resolve) => {\n//     video.onloadedmetadata = () => {\n//       resolve(video);\n//     };\n//   });\n// }\n\n// async function loadVideo() {\n//   const video = await setupCamera();\n//   video.play();\n\n//   return video;\n// }\n\n// const guiState = {\n//   algorithm: 'multi-pose',\n//   input: {\n//     mobileNetArchitecture: isMobile() ? '0.50' : '0.75',\n//     outputStride: 16,\n//     imageScaleFactor: 0.5,\n//   },\n//   singlePoseDetection: {\n//     minPoseConfidence: 0.1,\n//     minPartConfidence: 0.5,\n//   },\n//   multiPoseDetection: {\n//     maxPoseDetections: 5,\n//     minPoseConfidence: 0.15,\n//     minPartConfidence: 0.1,\n//     nmsRadius: 30.0,\n//   },\n//   output: {\n//     showVideo: true,\n//     showSkeleton: true,\n//     showPoints: true,\n//   },\n//   net: null,\n// };\n\n// /**\n//  * Sets up dat.gui controller on the top-right of the window\n//  */\n// function setupGui(cameras, net) {\n//   guiState.net = net;\n\n//   if (cameras.length > 0) {\n//     guiState.camera = cameras[0].deviceId;\n//   }\n\n//   const gui = new dat.GUI({width: 300});\n\n//   // The single-pose algorithm is faster and simpler but requires only one\n//   // person to be in the frame or results will be innaccurate. Multi-pose works\n//   // for more than 1 person\n//   const algorithmController =\n//       gui.add(guiState, 'algorithm', ['single-pose', 'multi-pose']);\n\n//   // The input parameters have the most effect on accuracy and speed of the\n//   // network\n//   let input = gui.addFolder('Input');\n//   // Architecture: there are a few PoseNet models varying in size and\n//   // accuracy. 1.01 is the largest, but will be the slowest. 0.50 is the\n//   // fastest, but least accurate.\n//   const architectureController = input.add(\n//       guiState.input, 'mobileNetArchitecture',\n//       ['1.01', '1.00', '0.75', '0.50']);\n//   // Output stride:  Internally, this parameter affects the height and width of\n//   // the layers in the neural network. The lower the value of the output stride\n//   // the higher the accuracy but slower the speed, the higher the value the\n//   // faster the speed but lower the accuracy.\n//   input.add(guiState.input, 'outputStride', [8, 16, 32]);\n//   // Image scale factor: What to scale the image by before feeding it through\n//   // the network.\n//   input.add(guiState.input, 'imageScaleFactor').min(0.2).max(1.0);\n//   input.open();\n\n//   // Pose confidence: the overall confidence in the estimation of a person's\n//   // pose (i.e. a person detected in a frame)\n//   // Min part confidence: the confidence that a particular estimated keypoint\n//   // position is accurate (i.e. the elbow's position)\n//   let single = gui.addFolder('Single Pose Detection');\n//   single.add(guiState.singlePoseDetection, 'minPoseConfidence', 0.0, 1.0);\n//   single.add(guiState.singlePoseDetection, 'minPartConfidence', 0.0, 1.0);\n\n//   let multi = gui.addFolder('Multi Pose Detection');\n//   multi.add(guiState.multiPoseDetection, 'maxPoseDetections')\n//       .min(1)\n//       .max(20)\n//       .step(1);\n//   multi.add(guiState.multiPoseDetection, 'minPoseConfidence', 0.0, 1.0);\n//   multi.add(guiState.multiPoseDetection, 'minPartConfidence', 0.0, 1.0);\n//   // nms Radius: controls the minimum distance between poses that are returned\n//   // defaults to 20, which is probably fine for most use cases\n//   multi.add(guiState.multiPoseDetection, 'nmsRadius').min(0.0).max(40.0);\n//   multi.open();\n\n//   let output = gui.addFolder('Output');\n//   output.add(guiState.output, 'showVideo');\n//   output.add(guiState.output, 'showSkeleton');\n//   output.add(guiState.output, 'showPoints');\n//   output.open();\n\n\n//   architectureController.onChange(function(architecture) {\n//     guiState.changeToArchitecture = architecture;\n//   });\n\n//   algorithmController.onChange(function(value) {\n//     switch (guiState.algorithm) {\n//       case 'single-pose':\n//         multi.close();\n//         single.open();\n//         break;\n//       case 'multi-pose':\n//         single.close();\n//         multi.open();\n//         break;\n//     }\n//   });\n// }\n\n// /**\n//  * Sets up a frames per second panel on the top-left of the window\n//  */\n// function setupFPS() {\n//   stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n//   document.body.appendChild(stats.dom);\n// }\n\n// /**\n//  * Feeds an image to posenet to estimate poses - this is where the magic\n//  * happens. This function loops with a requestAnimationFrame method.\n//  */\n// function detectPoseInRealTime(video, net) {\n//   const canvas = document.getElementById('output');\n//   const ctx = canvas.getContext('2d');\n//   // since images are being fed from a webcam\n//   const flipHorizontal = true;\n\n//   canvas.width = videoWidth;\n//   canvas.height = videoHeight;\n\n//   async function poseDetectionFrame() {\n//     if (guiState.changeToArchitecture) {\n//       // Important to purge variables and free up GPU memory\n//       guiState.net.dispose();\n\n//       // Load the PoseNet model weights for either the 0.50, 0.75, 1.00, or 1.01\n//       // version\n//       guiState.net = await posenet.load(+guiState.changeToArchitecture);\n\n//       guiState.changeToArchitecture = null;\n//     }\n\n//     // Begin monitoring code for frames per second\n//     stats.begin();\n\n//     // Scale an image down to a certain factor. Too large of an image will slow\n//     // down the GPU\n//     const imageScaleFactor = guiState.input.imageScaleFactor;\n//     const outputStride = +guiState.input.outputStride;\n\n//     let poses = [];\n//     let minPoseConfidence;\n//     let minPartConfidence;\n//     switch (guiState.algorithm) {\n//       case 'single-pose':\n//         const pose = await guiState.net.estimateSinglePose(\n//             video, imageScaleFactor, flipHorizontal, outputStride);\n//         poses.push(pose);\n\n//         minPoseConfidence = +guiState.singlePoseDetection.minPoseConfidence;\n//         minPartConfidence = +guiState.singlePoseDetection.minPartConfidence;\n//         break;\n//       case 'multi-pose':\n//         poses = await guiState.net.estimateMultiplePoses(\n//             video, imageScaleFactor, flipHorizontal, outputStride,\n//             guiState.multiPoseDetection.maxPoseDetections,\n//             guiState.multiPoseDetection.minPartConfidence,\n//             guiState.multiPoseDetection.nmsRadius);\n\n//         minPoseConfidence = +guiState.multiPoseDetection.minPoseConfidence;\n//         minPartConfidence = +guiState.multiPoseDetection.minPartConfidence;\n//         break;\n//     }\n\n//     ctx.clearRect(0, 0, videoWidth, videoHeight);\n\n//     if (guiState.output.showVideo) {\n//       ctx.save();\n//       ctx.scale(-1, 1);\n//       ctx.translate(-videoWidth, 0);\n//       ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n//       ctx.restore();\n//     }\n\n//     // For each pose (i.e. person) detected in an image, loop through the poses\n//     // and draw the resulting skeleton and keypoints if over certain confidence\n//     // scores\n//     poses.forEach(({score, keypoints}) => {\n//       if (score >= minPoseConfidence) {\n//         if (guiState.output.showPoints) {\n//           drawKeypoints(keypoints, minPartConfidence, ctx);\n//         }\n//         if (guiState.output.showSkeleton) {\n//           drawSkeleton(keypoints, minPartConfidence, ctx);\n//         }\n//       }\n//     });\n\n//     // End monitoring code for frames per second\n//     stats.end();\n\n//     requestAnimationFrame(poseDetectionFrame);\n//   }\n\n//   poseDetectionFrame();\n// }\n\n// /**\n//  * Kicks off the demo by loading the posenet model, finding and loading\n//  * available camera devices, and setting off the detectPoseInRealTime function.\n//  */\n// export async function bindPage() {\n//   // Load the PoseNet model weights with architecture 0.75\n//   const net = await posenet.load(0.75);\n\n//   document.getElementById('loading').style.display = 'none';\n//   document.getElementById('main').style.display = 'block';\n\n//   let video;\n\n//   try {\n//     video = await loadVideo();\n//   } catch (e) {\n//     let info = document.getElementById('info');\n//     info.textContent = 'this browser does not support video capture,' +\n//         'or this device does not have a camera';\n//     info.style.display = 'block';\n//     throw e;\n//   }\n\n//   setupGui([], net);\n//   setupFPS();\n//   detectPoseInRealTime(video, net);\n// }\n\n// navigator.getUserMedia = navigator.getUserMedia ||\n//     navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n// // kick off the demo\n// bindPage();","map":{"mappings":[{"generated":{"line":1,"column":0},"source":"camera.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"camera.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"camera.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"camera.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"camera.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"camera.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"camera.js","original":{"line":7,"column":0}},{"generated":{"line":8,"column":0},"source":"camera.js","original":{"line":8,"column":0}},{"generated":{"line":9,"column":0},"source":"camera.js","original":{"line":9,"column":0}},{"generated":{"line":10,"column":0},"source":"camera.js","original":{"line":10,"column":0}},{"generated":{"line":11,"column":0},"source":"camera.js","original":{"line":11,"column":0}},{"generated":{"line":12,"column":0},"source":"camera.js","original":{"line":12,"column":0}},{"generated":{"line":13,"column":0},"source":"camera.js","original":{"line":13,"column":0}},{"generated":{"line":14,"column":0},"source":"camera.js","original":{"line":14,"column":0}},{"generated":{"line":15,"column":0},"source":"camera.js","original":{"line":15,"column":0}},{"generated":{"line":16,"column":0},"source":"camera.js","original":{"line":16,"column":0}},{"generated":{"line":17,"column":0},"source":"camera.js","original":{"line":17,"column":0}},{"generated":{"line":18,"column":0},"source":"camera.js","original":{"line":18,"column":0}},{"generated":{"line":19,"column":0},"source":"camera.js","original":{"line":19,"column":0}},{"generated":{"line":20,"column":0},"source":"camera.js","original":{"line":20,"column":0}},{"generated":{"line":22,"column":0},"source":"camera.js","original":{"line":22,"column":0}},{"generated":{"line":23,"column":0},"source":"camera.js","original":{"line":23,"column":0}},{"generated":{"line":24,"column":0},"source":"camera.js","original":{"line":24,"column":0}},{"generated":{"line":26,"column":0},"source":"camera.js","original":{"line":26,"column":0}},{"generated":{"line":27,"column":0},"source":"camera.js","original":{"line":27,"column":0}},{"generated":{"line":28,"column":0},"source":"camera.js","original":{"line":28,"column":0}},{"generated":{"line":30,"column":0},"source":"camera.js","original":{"line":30,"column":0}},{"generated":{"line":31,"column":0},"source":"camera.js","original":{"line":31,"column":0}},{"generated":{"line":32,"column":0},"source":"camera.js","original":{"line":32,"column":0}},{"generated":{"line":34,"column":0},"source":"camera.js","original":{"line":34,"column":0}},{"generated":{"line":35,"column":0},"source":"camera.js","original":{"line":35,"column":0}},{"generated":{"line":36,"column":0},"source":"camera.js","original":{"line":36,"column":0}},{"generated":{"line":38,"column":0},"source":"camera.js","original":{"line":38,"column":0}},{"generated":{"line":39,"column":0},"source":"camera.js","original":{"line":39,"column":0}},{"generated":{"line":40,"column":0},"source":"camera.js","original":{"line":40,"column":0}},{"generated":{"line":41,"column":0},"source":"camera.js","original":{"line":41,"column":0}},{"generated":{"line":42,"column":0},"source":"camera.js","original":{"line":42,"column":0}},{"generated":{"line":43,"column":0},"source":"camera.js","original":{"line":43,"column":0}},{"generated":{"line":44,"column":0},"source":"camera.js","original":{"line":44,"column":0}},{"generated":{"line":45,"column":0},"source":"camera.js","original":{"line":45,"column":0}},{"generated":{"line":46,"column":0},"source":"camera.js","original":{"line":46,"column":0}},{"generated":{"line":48,"column":0},"source":"camera.js","original":{"line":48,"column":0}},{"generated":{"line":49,"column":0},"source":"camera.js","original":{"line":49,"column":0}},{"generated":{"line":50,"column":0},"source":"camera.js","original":{"line":50,"column":0}},{"generated":{"line":52,"column":0},"source":"camera.js","original":{"line":52,"column":0}},{"generated":{"line":53,"column":0},"source":"camera.js","original":{"line":53,"column":0}},{"generated":{"line":54,"column":0},"source":"camera.js","original":{"line":54,"column":0}},{"generated":{"line":55,"column":0},"source":"camera.js","original":{"line":55,"column":0}},{"generated":{"line":56,"column":0},"source":"camera.js","original":{"line":56,"column":0}},{"generated":{"line":57,"column":0},"source":"camera.js","original":{"line":57,"column":0}},{"generated":{"line":58,"column":0},"source":"camera.js","original":{"line":58,"column":0}},{"generated":{"line":59,"column":0},"source":"camera.js","original":{"line":59,"column":0}},{"generated":{"line":60,"column":0},"source":"camera.js","original":{"line":60,"column":0}},{"generated":{"line":61,"column":0},"source":"camera.js","original":{"line":61,"column":0}},{"generated":{"line":63,"column":0},"source":"camera.js","original":{"line":63,"column":0}},{"generated":{"line":64,"column":0},"source":"camera.js","original":{"line":64,"column":0}},{"generated":{"line":65,"column":0},"source":"camera.js","original":{"line":65,"column":0}},{"generated":{"line":66,"column":0},"source":"camera.js","original":{"line":66,"column":0}},{"generated":{"line":67,"column":0},"source":"camera.js","original":{"line":67,"column":0}},{"generated":{"line":68,"column":0},"source":"camera.js","original":{"line":68,"column":0}},{"generated":{"line":70,"column":0},"source":"camera.js","original":{"line":70,"column":0}},{"generated":{"line":71,"column":0},"source":"camera.js","original":{"line":71,"column":0}},{"generated":{"line":72,"column":0},"source":"camera.js","original":{"line":72,"column":0}},{"generated":{"line":74,"column":0},"source":"camera.js","original":{"line":74,"column":0}},{"generated":{"line":75,"column":0},"source":"camera.js","original":{"line":75,"column":0}},{"generated":{"line":77,"column":0},"source":"camera.js","original":{"line":77,"column":0}},{"generated":{"line":78,"column":0},"source":"camera.js","original":{"line":78,"column":0}},{"generated":{"line":79,"column":0},"source":"camera.js","original":{"line":79,"column":0}},{"generated":{"line":80,"column":0},"source":"camera.js","original":{"line":80,"column":0}},{"generated":{"line":81,"column":0},"source":"camera.js","original":{"line":81,"column":0}},{"generated":{"line":82,"column":0},"source":"camera.js","original":{"line":82,"column":0}},{"generated":{"line":83,"column":0},"source":"camera.js","original":{"line":83,"column":0}},{"generated":{"line":84,"column":0},"source":"camera.js","original":{"line":84,"column":0}},{"generated":{"line":85,"column":0},"source":"camera.js","original":{"line":85,"column":0}},{"generated":{"line":86,"column":0},"source":"camera.js","original":{"line":86,"column":0}},{"generated":{"line":87,"column":0},"source":"camera.js","original":{"line":87,"column":0}},{"generated":{"line":88,"column":0},"source":"camera.js","original":{"line":88,"column":0}},{"generated":{"line":89,"column":0},"source":"camera.js","original":{"line":89,"column":0}},{"generated":{"line":90,"column":0},"source":"camera.js","original":{"line":90,"column":0}},{"generated":{"line":91,"column":0},"source":"camera.js","original":{"line":91,"column":0}},{"generated":{"line":92,"column":0},"source":"camera.js","original":{"line":92,"column":0}},{"generated":{"line":93,"column":0},"source":"camera.js","original":{"line":93,"column":0}},{"generated":{"line":94,"column":0},"source":"camera.js","original":{"line":94,"column":0}},{"generated":{"line":95,"column":0},"source":"camera.js","original":{"line":95,"column":0}},{"generated":{"line":96,"column":0},"source":"camera.js","original":{"line":96,"column":0}},{"generated":{"line":97,"column":0},"source":"camera.js","original":{"line":97,"column":0}},{"generated":{"line":98,"column":0},"source":"camera.js","original":{"line":98,"column":0}},{"generated":{"line":99,"column":0},"source":"camera.js","original":{"line":99,"column":0}},{"generated":{"line":100,"column":0},"source":"camera.js","original":{"line":100,"column":0}},{"generated":{"line":102,"column":0},"source":"camera.js","original":{"line":102,"column":0}},{"generated":{"line":103,"column":0},"source":"camera.js","original":{"line":103,"column":0}},{"generated":{"line":104,"column":0},"source":"camera.js","original":{"line":104,"column":0}},{"generated":{"line":105,"column":0},"source":"camera.js","original":{"line":105,"column":0}},{"generated":{"line":106,"column":0},"source":"camera.js","original":{"line":106,"column":0}},{"generated":{"line":108,"column":0},"source":"camera.js","original":{"line":108,"column":0}},{"generated":{"line":109,"column":0},"source":"camera.js","original":{"line":109,"column":0}},{"generated":{"line":110,"column":0},"source":"camera.js","original":{"line":110,"column":0}},{"generated":{"line":112,"column":0},"source":"camera.js","original":{"line":112,"column":0}},{"generated":{"line":114,"column":0},"source":"camera.js","original":{"line":114,"column":0}},{"generated":{"line":115,"column":0},"source":"camera.js","original":{"line":115,"column":0}},{"generated":{"line":116,"column":0},"source":"camera.js","original":{"line":116,"column":0}},{"generated":{"line":117,"column":0},"source":"camera.js","original":{"line":117,"column":0}},{"generated":{"line":118,"column":0},"source":"camera.js","original":{"line":118,"column":0}},{"generated":{"line":120,"column":0},"source":"camera.js","original":{"line":120,"column":0}},{"generated":{"line":121,"column":0},"source":"camera.js","original":{"line":121,"column":0}},{"generated":{"line":122,"column":0},"source":"camera.js","original":{"line":122,"column":0}},{"generated":{"line":123,"column":0},"source":"camera.js","original":{"line":123,"column":0}},{"generated":{"line":124,"column":0},"source":"camera.js","original":{"line":124,"column":0}},{"generated":{"line":125,"column":0},"source":"camera.js","original":{"line":125,"column":0}},{"generated":{"line":126,"column":0},"source":"camera.js","original":{"line":126,"column":0}},{"generated":{"line":127,"column":0},"source":"camera.js","original":{"line":127,"column":0}},{"generated":{"line":128,"column":0},"source":"camera.js","original":{"line":128,"column":0}},{"generated":{"line":129,"column":0},"source":"camera.js","original":{"line":129,"column":0}},{"generated":{"line":130,"column":0},"source":"camera.js","original":{"line":130,"column":0}},{"generated":{"line":131,"column":0},"source":"camera.js","original":{"line":131,"column":0}},{"generated":{"line":132,"column":0},"source":"camera.js","original":{"line":132,"column":0}},{"generated":{"line":133,"column":0},"source":"camera.js","original":{"line":133,"column":0}},{"generated":{"line":134,"column":0},"source":"camera.js","original":{"line":134,"column":0}},{"generated":{"line":135,"column":0},"source":"camera.js","original":{"line":135,"column":0}},{"generated":{"line":136,"column":0},"source":"camera.js","original":{"line":136,"column":0}},{"generated":{"line":137,"column":0},"source":"camera.js","original":{"line":137,"column":0}},{"generated":{"line":139,"column":0},"source":"camera.js","original":{"line":139,"column":0}},{"generated":{"line":140,"column":0},"source":"camera.js","original":{"line":140,"column":0}},{"generated":{"line":141,"column":0},"source":"camera.js","original":{"line":141,"column":0}},{"generated":{"line":142,"column":0},"source":"camera.js","original":{"line":142,"column":0}},{"generated":{"line":143,"column":0},"source":"camera.js","original":{"line":143,"column":0}},{"generated":{"line":144,"column":0},"source":"camera.js","original":{"line":144,"column":0}},{"generated":{"line":145,"column":0},"source":"camera.js","original":{"line":145,"column":0}},{"generated":{"line":147,"column":0},"source":"camera.js","original":{"line":147,"column":0}},{"generated":{"line":148,"column":0},"source":"camera.js","original":{"line":148,"column":0}},{"generated":{"line":149,"column":0},"source":"camera.js","original":{"line":149,"column":0}},{"generated":{"line":150,"column":0},"source":"camera.js","original":{"line":150,"column":0}},{"generated":{"line":151,"column":0},"source":"camera.js","original":{"line":151,"column":0}},{"generated":{"line":152,"column":0},"source":"camera.js","original":{"line":152,"column":0}},{"generated":{"line":153,"column":0},"source":"camera.js","original":{"line":153,"column":0}},{"generated":{"line":154,"column":0},"source":"camera.js","original":{"line":154,"column":0}},{"generated":{"line":155,"column":0},"source":"camera.js","original":{"line":155,"column":0}},{"generated":{"line":156,"column":0},"source":"camera.js","original":{"line":156,"column":0}},{"generated":{"line":157,"column":0},"source":"camera.js","original":{"line":157,"column":0}},{"generated":{"line":159,"column":0},"source":"camera.js","original":{"line":159,"column":0}},{"generated":{"line":160,"column":0},"source":"camera.js","original":{"line":160,"column":0}},{"generated":{"line":161,"column":0},"source":"camera.js","original":{"line":161,"column":0}},{"generated":{"line":162,"column":0},"source":"camera.js","original":{"line":162,"column":0}},{"generated":{"line":163,"column":0},"source":"camera.js","original":{"line":163,"column":0}},{"generated":{"line":166,"column":0},"source":"camera.js","original":{"line":166,"column":0}},{"generated":{"line":167,"column":0},"source":"camera.js","original":{"line":167,"column":0}},{"generated":{"line":168,"column":0},"source":"camera.js","original":{"line":168,"column":0}},{"generated":{"line":170,"column":0},"source":"camera.js","original":{"line":170,"column":0}},{"generated":{"line":171,"column":0},"source":"camera.js","original":{"line":171,"column":0}},{"generated":{"line":172,"column":0},"source":"camera.js","original":{"line":172,"column":0}},{"generated":{"line":173,"column":0},"source":"camera.js","original":{"line":173,"column":0}},{"generated":{"line":174,"column":0},"source":"camera.js","original":{"line":174,"column":0}},{"generated":{"line":175,"column":0},"source":"camera.js","original":{"line":175,"column":0}},{"generated":{"line":176,"column":0},"source":"camera.js","original":{"line":176,"column":0}},{"generated":{"line":177,"column":0},"source":"camera.js","original":{"line":177,"column":0}},{"generated":{"line":178,"column":0},"source":"camera.js","original":{"line":178,"column":0}},{"generated":{"line":179,"column":0},"source":"camera.js","original":{"line":179,"column":0}},{"generated":{"line":180,"column":0},"source":"camera.js","original":{"line":180,"column":0}},{"generated":{"line":181,"column":0},"source":"camera.js","original":{"line":181,"column":0}},{"generated":{"line":182,"column":0},"source":"camera.js","original":{"line":182,"column":0}},{"generated":{"line":184,"column":0},"source":"camera.js","original":{"line":184,"column":0}},{"generated":{"line":185,"column":0},"source":"camera.js","original":{"line":185,"column":0}},{"generated":{"line":186,"column":0},"source":"camera.js","original":{"line":186,"column":0}},{"generated":{"line":187,"column":0},"source":"camera.js","original":{"line":187,"column":0}},{"generated":{"line":188,"column":0},"source":"camera.js","original":{"line":188,"column":0}},{"generated":{"line":189,"column":0},"source":"camera.js","original":{"line":189,"column":0}},{"generated":{"line":190,"column":0},"source":"camera.js","original":{"line":190,"column":0}},{"generated":{"line":192,"column":0},"source":"camera.js","original":{"line":192,"column":0}},{"generated":{"line":193,"column":0},"source":"camera.js","original":{"line":193,"column":0}},{"generated":{"line":194,"column":0},"source":"camera.js","original":{"line":194,"column":0}},{"generated":{"line":195,"column":0},"source":"camera.js","original":{"line":195,"column":0}},{"generated":{"line":196,"column":0},"source":"camera.js","original":{"line":196,"column":0}},{"generated":{"line":197,"column":0},"source":"camera.js","original":{"line":197,"column":0}},{"generated":{"line":198,"column":0},"source":"camera.js","original":{"line":198,"column":0}},{"generated":{"line":199,"column":0},"source":"camera.js","original":{"line":199,"column":0}},{"generated":{"line":200,"column":0},"source":"camera.js","original":{"line":200,"column":0}},{"generated":{"line":202,"column":0},"source":"camera.js","original":{"line":202,"column":0}},{"generated":{"line":203,"column":0},"source":"camera.js","original":{"line":203,"column":0}},{"generated":{"line":205,"column":0},"source":"camera.js","original":{"line":205,"column":0}},{"generated":{"line":206,"column":0},"source":"camera.js","original":{"line":206,"column":0}},{"generated":{"line":207,"column":0},"source":"camera.js","original":{"line":207,"column":0}},{"generated":{"line":208,"column":0},"source":"camera.js","original":{"line":208,"column":0}},{"generated":{"line":210,"column":0},"source":"camera.js","original":{"line":210,"column":0}},{"generated":{"line":211,"column":0},"source":"camera.js","original":{"line":211,"column":0}},{"generated":{"line":212,"column":0},"source":"camera.js","original":{"line":212,"column":0}},{"generated":{"line":214,"column":0},"source":"camera.js","original":{"line":214,"column":0}},{"generated":{"line":215,"column":0},"source":"camera.js","original":{"line":215,"column":0}},{"generated":{"line":217,"column":0},"source":"camera.js","original":{"line":217,"column":0}},{"generated":{"line":218,"column":0},"source":"camera.js","original":{"line":218,"column":0}},{"generated":{"line":220,"column":0},"source":"camera.js","original":{"line":220,"column":0}},{"generated":{"line":221,"column":0},"source":"camera.js","original":{"line":221,"column":0}},{"generated":{"line":222,"column":0},"source":"camera.js","original":{"line":222,"column":0}},{"generated":{"line":223,"column":0},"source":"camera.js","original":{"line":223,"column":0}},{"generated":{"line":225,"column":0},"source":"camera.js","original":{"line":225,"column":0}},{"generated":{"line":226,"column":0},"source":"camera.js","original":{"line":226,"column":0}},{"generated":{"line":227,"column":0},"source":"camera.js","original":{"line":227,"column":0}},{"generated":{"line":228,"column":0},"source":"camera.js","original":{"line":228,"column":0}},{"generated":{"line":229,"column":0},"source":"camera.js","original":{"line":229,"column":0}},{"generated":{"line":230,"column":0},"source":"camera.js","original":{"line":230,"column":0}},{"generated":{"line":231,"column":0},"source":"camera.js","original":{"line":231,"column":0}},{"generated":{"line":232,"column":0},"source":"camera.js","original":{"line":232,"column":0}},{"generated":{"line":234,"column":0},"source":"camera.js","original":{"line":234,"column":0}},{"generated":{"line":235,"column":0},"source":"camera.js","original":{"line":235,"column":0}},{"generated":{"line":236,"column":0},"source":"camera.js","original":{"line":236,"column":0}},{"generated":{"line":237,"column":0},"source":"camera.js","original":{"line":237,"column":0}},{"generated":{"line":238,"column":0},"source":"camera.js","original":{"line":238,"column":0}},{"generated":{"line":239,"column":0},"source":"camera.js","original":{"line":239,"column":0}},{"generated":{"line":240,"column":0},"source":"camera.js","original":{"line":240,"column":0}},{"generated":{"line":241,"column":0},"source":"camera.js","original":{"line":241,"column":0}},{"generated":{"line":242,"column":0},"source":"camera.js","original":{"line":242,"column":0}},{"generated":{"line":244,"column":0},"source":"camera.js","original":{"line":244,"column":0}},{"generated":{"line":245,"column":0},"source":"camera.js","original":{"line":245,"column":0}},{"generated":{"line":246,"column":0},"source":"camera.js","original":{"line":246,"column":0}},{"generated":{"line":247,"column":0},"source":"camera.js","original":{"line":247,"column":0}},{"generated":{"line":249,"column":0},"source":"camera.js","original":{"line":249,"column":0}},{"generated":{"line":251,"column":0},"source":"camera.js","original":{"line":251,"column":0}},{"generated":{"line":252,"column":0},"source":"camera.js","original":{"line":252,"column":0}},{"generated":{"line":253,"column":0},"source":"camera.js","original":{"line":253,"column":0}},{"generated":{"line":254,"column":0},"source":"camera.js","original":{"line":254,"column":0}},{"generated":{"line":255,"column":0},"source":"camera.js","original":{"line":255,"column":0}},{"generated":{"line":256,"column":0},"source":"camera.js","original":{"line":256,"column":0}},{"generated":{"line":257,"column":0},"source":"camera.js","original":{"line":257,"column":0}},{"generated":{"line":259,"column":0},"source":"camera.js","original":{"line":259,"column":0}},{"generated":{"line":260,"column":0},"source":"camera.js","original":{"line":260,"column":0}},{"generated":{"line":261,"column":0},"source":"camera.js","original":{"line":261,"column":0}},{"generated":{"line":262,"column":0},"source":"camera.js","original":{"line":262,"column":0}},{"generated":{"line":263,"column":0},"source":"camera.js","original":{"line":263,"column":0}},{"generated":{"line":264,"column":0},"source":"camera.js","original":{"line":264,"column":0}},{"generated":{"line":265,"column":0},"source":"camera.js","original":{"line":265,"column":0}},{"generated":{"line":266,"column":0},"source":"camera.js","original":{"line":266,"column":0}},{"generated":{"line":267,"column":0},"source":"camera.js","original":{"line":267,"column":0}},{"generated":{"line":268,"column":0},"source":"camera.js","original":{"line":268,"column":0}},{"generated":{"line":269,"column":0},"source":"camera.js","original":{"line":269,"column":0}},{"generated":{"line":270,"column":0},"source":"camera.js","original":{"line":270,"column":0}},{"generated":{"line":271,"column":0},"source":"camera.js","original":{"line":271,"column":0}},{"generated":{"line":273,"column":0},"source":"camera.js","original":{"line":273,"column":0}},{"generated":{"line":274,"column":0},"source":"camera.js","original":{"line":274,"column":0}},{"generated":{"line":276,"column":0},"source":"camera.js","original":{"line":276,"column":0}},{"generated":{"line":277,"column":0},"source":"camera.js","original":{"line":277,"column":0}},{"generated":{"line":279,"column":0},"source":"camera.js","original":{"line":279,"column":0}},{"generated":{"line":280,"column":0},"source":"camera.js","original":{"line":280,"column":0}},{"generated":{"line":282,"column":0},"source":"camera.js","original":{"line":282,"column":0}},{"generated":{"line":283,"column":0},"source":"camera.js","original":{"line":283,"column":0}},{"generated":{"line":284,"column":0},"source":"camera.js","original":{"line":284,"column":0}},{"generated":{"line":285,"column":0},"source":"camera.js","original":{"line":285,"column":0}},{"generated":{"line":286,"column":0},"source":"camera.js","original":{"line":286,"column":0}},{"generated":{"line":287,"column":0},"source":"camera.js","original":{"line":287,"column":0}},{"generated":{"line":288,"column":0},"source":"camera.js","original":{"line":288,"column":0}},{"generated":{"line":290,"column":0},"source":"camera.js","original":{"line":290,"column":0}},{"generated":{"line":291,"column":0},"source":"camera.js","original":{"line":291,"column":0}},{"generated":{"line":293,"column":0},"source":"camera.js","original":{"line":293,"column":0}},{"generated":{"line":295,"column":0},"source":"camera.js","original":{"line":295,"column":0}},{"generated":{"line":296,"column":0},"source":"camera.js","original":{"line":296,"column":0}},{"generated":{"line":297,"column":0},"source":"camera.js","original":{"line":297,"column":0}},{"generated":{"line":298,"column":0},"source":"camera.js","original":{"line":298,"column":0}},{"generated":{"line":299,"column":0},"source":"camera.js","original":{"line":299,"column":0}},{"generated":{"line":300,"column":0},"source":"camera.js","original":{"line":300,"column":0}},{"generated":{"line":301,"column":0},"source":"camera.js","original":{"line":301,"column":0}},{"generated":{"line":302,"column":0},"source":"camera.js","original":{"line":302,"column":0}},{"generated":{"line":303,"column":0},"source":"camera.js","original":{"line":303,"column":0}},{"generated":{"line":305,"column":0},"source":"camera.js","original":{"line":305,"column":0}},{"generated":{"line":306,"column":0},"source":"camera.js","original":{"line":306,"column":0}},{"generated":{"line":307,"column":0},"source":"camera.js","original":{"line":307,"column":0}},{"generated":{"line":308,"column":0},"source":"camera.js","original":{"line":308,"column":0}},{"generated":{"line":310,"column":0},"source":"camera.js","original":{"line":310,"column":0}},{"generated":{"line":311,"column":0},"source":"camera.js","original":{"line":311,"column":0}},{"generated":{"line":312,"column":0},"source":"camera.js","original":{"line":312,"column":0}},{"generated":{"line":313,"column":0},"source":"camera.js","original":{"line":313,"column":0}}],"sources":{"camera.js":"// /**\n//  * @license\n//  * Copyright 2018 Google Inc. All Rights Reserved.\n//  * Licensed under the Apache License, Version 2.0 (the \"License\");\n//  * you may not use this file except in compliance with the License.\n//  * You may obtain a copy of the License at\n//  *\n//  * https://www.apache.org/licenses/LICENSE-2.0\n//  *\n//  * Unless required by applicable law or agreed to in writing, software\n//  * distributed under the License is distributed on an \"AS IS\" BASIS,\n//  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  * See the License for the specific language governing permissions and\n//  * limitations under the License.\n//  * =============================================================================\n//  */\n// import * as posenet from '@tensorflow-models/posenet';\n// import dat from 'dat.gui';\n// import Stats from 'stats.js';\n// import {drawKeypoints, drawSkeleton} from './demo_util';\n\n// const videoWidth = 600;\n// const videoHeight = 500;\n// const stats = new Stats();\n\n// function isAndroid() {\n//   return /Android/i.test(navigator.userAgent);\n// }\n\n// function isiOS() {\n//   return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n// }\n\n// function isMobile() {\n//   return isAndroid() || isiOS();\n// }\n\n// /**\n//  * Loads a the camera to be used in the demo\n//  *\n//  */\n// async function setupCamera() {\n//   if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n//     throw new Error(\n//         'Browser API navigator.mediaDevices.getUserMedia not available');\n//   }\n\n//   const video = document.getElementById('video');\n//   video.width = videoWidth;\n//   video.height = videoHeight;\n\n//   const mobile = isMobile();\n//   const stream = await navigator.mediaDevices.getUserMedia({\n//     'audio': false,\n//     'video': {\n//       facingMode: 'user',\n//       width: mobile ? undefined : videoWidth,\n//       height: mobile ? undefined : videoHeight,\n//     },\n//   });\n//   video.srcObject = stream;\n\n//   return new Promise((resolve) => {\n//     video.onloadedmetadata = () => {\n//       resolve(video);\n//     };\n//   });\n// }\n\n// async function loadVideo() {\n//   const video = await setupCamera();\n//   video.play();\n\n//   return video;\n// }\n\n// const guiState = {\n//   algorithm: 'multi-pose',\n//   input: {\n//     mobileNetArchitecture: isMobile() ? '0.50' : '0.75',\n//     outputStride: 16,\n//     imageScaleFactor: 0.5,\n//   },\n//   singlePoseDetection: {\n//     minPoseConfidence: 0.1,\n//     minPartConfidence: 0.5,\n//   },\n//   multiPoseDetection: {\n//     maxPoseDetections: 5,\n//     minPoseConfidence: 0.15,\n//     minPartConfidence: 0.1,\n//     nmsRadius: 30.0,\n//   },\n//   output: {\n//     showVideo: true,\n//     showSkeleton: true,\n//     showPoints: true,\n//   },\n//   net: null,\n// };\n\n// /**\n//  * Sets up dat.gui controller on the top-right of the window\n//  */\n// function setupGui(cameras, net) {\n//   guiState.net = net;\n\n//   if (cameras.length > 0) {\n//     guiState.camera = cameras[0].deviceId;\n//   }\n\n//   const gui = new dat.GUI({width: 300});\n\n//   // The single-pose algorithm is faster and simpler but requires only one\n//   // person to be in the frame or results will be innaccurate. Multi-pose works\n//   // for more than 1 person\n//   const algorithmController =\n//       gui.add(guiState, 'algorithm', ['single-pose', 'multi-pose']);\n\n//   // The input parameters have the most effect on accuracy and speed of the\n//   // network\n//   let input = gui.addFolder('Input');\n//   // Architecture: there are a few PoseNet models varying in size and\n//   // accuracy. 1.01 is the largest, but will be the slowest. 0.50 is the\n//   // fastest, but least accurate.\n//   const architectureController = input.add(\n//       guiState.input, 'mobileNetArchitecture',\n//       ['1.01', '1.00', '0.75', '0.50']);\n//   // Output stride:  Internally, this parameter affects the height and width of\n//   // the layers in the neural network. The lower the value of the output stride\n//   // the higher the accuracy but slower the speed, the higher the value the\n//   // faster the speed but lower the accuracy.\n//   input.add(guiState.input, 'outputStride', [8, 16, 32]);\n//   // Image scale factor: What to scale the image by before feeding it through\n//   // the network.\n//   input.add(guiState.input, 'imageScaleFactor').min(0.2).max(1.0);\n//   input.open();\n\n//   // Pose confidence: the overall confidence in the estimation of a person's\n//   // pose (i.e. a person detected in a frame)\n//   // Min part confidence: the confidence that a particular estimated keypoint\n//   // position is accurate (i.e. the elbow's position)\n//   let single = gui.addFolder('Single Pose Detection');\n//   single.add(guiState.singlePoseDetection, 'minPoseConfidence', 0.0, 1.0);\n//   single.add(guiState.singlePoseDetection, 'minPartConfidence', 0.0, 1.0);\n\n//   let multi = gui.addFolder('Multi Pose Detection');\n//   multi.add(guiState.multiPoseDetection, 'maxPoseDetections')\n//       .min(1)\n//       .max(20)\n//       .step(1);\n//   multi.add(guiState.multiPoseDetection, 'minPoseConfidence', 0.0, 1.0);\n//   multi.add(guiState.multiPoseDetection, 'minPartConfidence', 0.0, 1.0);\n//   // nms Radius: controls the minimum distance between poses that are returned\n//   // defaults to 20, which is probably fine for most use cases\n//   multi.add(guiState.multiPoseDetection, 'nmsRadius').min(0.0).max(40.0);\n//   multi.open();\n\n//   let output = gui.addFolder('Output');\n//   output.add(guiState.output, 'showVideo');\n//   output.add(guiState.output, 'showSkeleton');\n//   output.add(guiState.output, 'showPoints');\n//   output.open();\n\n\n//   architectureController.onChange(function(architecture) {\n//     guiState.changeToArchitecture = architecture;\n//   });\n\n//   algorithmController.onChange(function(value) {\n//     switch (guiState.algorithm) {\n//       case 'single-pose':\n//         multi.close();\n//         single.open();\n//         break;\n//       case 'multi-pose':\n//         single.close();\n//         multi.open();\n//         break;\n//     }\n//   });\n// }\n\n// /**\n//  * Sets up a frames per second panel on the top-left of the window\n//  */\n// function setupFPS() {\n//   stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n//   document.body.appendChild(stats.dom);\n// }\n\n// /**\n//  * Feeds an image to posenet to estimate poses - this is where the magic\n//  * happens. This function loops with a requestAnimationFrame method.\n//  */\n// function detectPoseInRealTime(video, net) {\n//   const canvas = document.getElementById('output');\n//   const ctx = canvas.getContext('2d');\n//   // since images are being fed from a webcam\n//   const flipHorizontal = true;\n\n//   canvas.width = videoWidth;\n//   canvas.height = videoHeight;\n\n//   async function poseDetectionFrame() {\n//     if (guiState.changeToArchitecture) {\n//       // Important to purge variables and free up GPU memory\n//       guiState.net.dispose();\n\n//       // Load the PoseNet model weights for either the 0.50, 0.75, 1.00, or 1.01\n//       // version\n//       guiState.net = await posenet.load(+guiState.changeToArchitecture);\n\n//       guiState.changeToArchitecture = null;\n//     }\n\n//     // Begin monitoring code for frames per second\n//     stats.begin();\n\n//     // Scale an image down to a certain factor. Too large of an image will slow\n//     // down the GPU\n//     const imageScaleFactor = guiState.input.imageScaleFactor;\n//     const outputStride = +guiState.input.outputStride;\n\n//     let poses = [];\n//     let minPoseConfidence;\n//     let minPartConfidence;\n//     switch (guiState.algorithm) {\n//       case 'single-pose':\n//         const pose = await guiState.net.estimateSinglePose(\n//             video, imageScaleFactor, flipHorizontal, outputStride);\n//         poses.push(pose);\n\n//         minPoseConfidence = +guiState.singlePoseDetection.minPoseConfidence;\n//         minPartConfidence = +guiState.singlePoseDetection.minPartConfidence;\n//         break;\n//       case 'multi-pose':\n//         poses = await guiState.net.estimateMultiplePoses(\n//             video, imageScaleFactor, flipHorizontal, outputStride,\n//             guiState.multiPoseDetection.maxPoseDetections,\n//             guiState.multiPoseDetection.minPartConfidence,\n//             guiState.multiPoseDetection.nmsRadius);\n\n//         minPoseConfidence = +guiState.multiPoseDetection.minPoseConfidence;\n//         minPartConfidence = +guiState.multiPoseDetection.minPartConfidence;\n//         break;\n//     }\n\n//     ctx.clearRect(0, 0, videoWidth, videoHeight);\n\n//     if (guiState.output.showVideo) {\n//       ctx.save();\n//       ctx.scale(-1, 1);\n//       ctx.translate(-videoWidth, 0);\n//       ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n//       ctx.restore();\n//     }\n\n//     // For each pose (i.e. person) detected in an image, loop through the poses\n//     // and draw the resulting skeleton and keypoints if over certain confidence\n//     // scores\n//     poses.forEach(({score, keypoints}) => {\n//       if (score >= minPoseConfidence) {\n//         if (guiState.output.showPoints) {\n//           drawKeypoints(keypoints, minPartConfidence, ctx);\n//         }\n//         if (guiState.output.showSkeleton) {\n//           drawSkeleton(keypoints, minPartConfidence, ctx);\n//         }\n//       }\n//     });\n\n//     // End monitoring code for frames per second\n//     stats.end();\n\n//     requestAnimationFrame(poseDetectionFrame);\n//   }\n\n//   poseDetectionFrame();\n// }\n\n// /**\n//  * Kicks off the demo by loading the posenet model, finding and loading\n//  * available camera devices, and setting off the detectPoseInRealTime function.\n//  */\n// export async function bindPage() {\n//   // Load the PoseNet model weights with architecture 0.75\n//   const net = await posenet.load(0.75);\n\n//   document.getElementById('loading').style.display = 'none';\n//   document.getElementById('main').style.display = 'block';\n\n//   let video;\n\n//   try {\n//     video = await loadVideo();\n//   } catch (e) {\n//     let info = document.getElementById('info');\n//     info.textContent = 'this browser does not support video capture,' +\n//         'or this device does not have a camera';\n//     info.style.display = 'block';\n//     throw e;\n//   }\n\n//   setupGui([], net);\n//   setupFPS();\n//   detectPoseInRealTime(video, net);\n// }\n\n// navigator.getUserMedia = navigator.getUserMedia ||\n//     navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n// // kick off the demo\n// bindPage();\n"},"lineCount":null}},"hash":"4e56cb6b636105e97c6eb3a07ad9ba6c","cacheData":{"env":{}}}