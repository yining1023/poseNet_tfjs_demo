{"dependencies":[{"name":"/Users/yiningshi/dev/tfjs-models/posenet/demos/package.json","includedInParent":true,"mtime":1530912130696},{"name":"/Users/yiningshi/dev/tfjs-models/posenet/demos/.babelrc","includedInParent":true,"mtime":1529855715672},{"name":"/Users/yiningshi/dev/tfjs-models/posenet/tsconfig.json","includedInParent":true,"mtime":1529855715734},{"name":"@tensorflow/tfjs","loc":{"line":3,"column":17}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs\");\nfunction mod(a, b) {\n    return tf.tidy(function () {\n        var floored = a.div(tf.scalar(b, 'int32'));\n        return a.sub(floored.mul(tf.scalar(b, 'int32')));\n    });\n}\nfunction argmax2d(inputs) {\n    var _a = inputs.shape, height = _a[0], width = _a[1], depth = _a[2];\n    return tf.tidy(function () {\n        var reshaped = inputs.reshape([height * width, depth]);\n        var coords = reshaped.argMax(0);\n        var yCoords = coords.div(tf.scalar(width, 'int32')).expandDims(1);\n        var xCoords = mod(coords, width).expandDims(1);\n        return tf.concat([yCoords, xCoords], 1);\n    });\n}\nexports.argmax2d = argmax2d;\n","map":{"version":3,"file":"argmax2d.js","sourceRoot":"","sources":["../src/singlePose/argmax2d.ts"],"names":[],"mappings":";;AAiBA,qCAAuC;AAEvC,aAAa,CAAc,EAAE,CAAS;IACpC,OAAO,EAAE,CAAC,IAAI,CAAC;QACb,IAAM,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;QAE7C,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;AACL,CAAC;AAED,kBAAyB,MAAmB;IACpC,IAAA,iBAAqC,EAApC,cAAM,EAAE,aAAK,EAAE,aAAK,CAAiB;IAE5C,OAAO,EAAE,CAAC,IAAI,CAAC;QACb,IAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QACzD,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAgB,CAAC;QAEjD,IAAM,OAAO,GACT,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAgB,CAAC;QACvE,IAAM,OAAO,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,CAAgB,CAAC;QAEhE,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC;AAbD,4BAaC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\n\nfunction mod(a: tf.Tensor1D, b: number): tf.Tensor1D {\n  return tf.tidy(() => {\n    const floored = a.div(tf.scalar(b, 'int32'));\n\n    return a.sub(floored.mul(tf.scalar(b, 'int32')));\n  });\n}\n\nexport function argmax2d(inputs: tf.Tensor3D): tf.Tensor2D {\n  const [height, width, depth] = inputs.shape;\n\n  return tf.tidy(() => {\n    const reshaped = inputs.reshape([height * width, depth]);\n    const coords = reshaped.argMax(0) as tf.Tensor1D;\n\n    const yCoords =\n        coords.div(tf.scalar(width, 'int32')).expandDims(1) as tf.Tensor2D;\n    const xCoords = mod(coords, width).expandDims(1) as tf.Tensor2D;\n\n    return tf.concat([yCoords, xCoords], 1);\n  });\n}\n"]}},"hash":"67c25772102b0141e3eb2811f9d288fc","cacheData":{"env":{}}}